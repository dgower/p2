<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: issue09 | P2 Magazine]]></title>
  <link href="http://thoughtworks.github.io/p2/blog/categories/issue09/atom.xml" rel="self"/>
  <link href="http://thoughtworks.github.io/p2/"/>
  <updated>2014-03-04T12:40:00+11:00</updated>
  <id>http://thoughtworks.github.io/p2/</id>
  <author>
    <name><![CDATA[The P2 Elves]]></name>
    <email><![CDATA[p2@thoughtworks.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Credits / About]]></title>
    <link href="http://thoughtworks.github.io/p2/issue09/credits/"/>
    <updated>2014-03-08T00:00:00+11:00</updated>
    <id>http://thoughtworks.github.io/p2/issue09/credits</id>
    <content type="html"><![CDATA[<p><strong>What is P2 Magazine?</strong></p>

<p>P2 refers to Pillar 2. Pillar 2, within ThoughtWorks, is focused on software excellence and revolutionizing the IT industry, flanked by pillars one and three of sustainable business and social justice. These three equally support ThoughtWorks.</p>

<p>Software excellence evades definition. It’s easy to think of concise lines of code laid out like prose. But we didn’t want this magazine to be exclusively for those who think in code. ThoughtWorks is filled with testers, designers, analysts and innovators. We had to expand our definition to include the excellence that happens before and after we consider how we solve a problem.</p>

<p><strong>Editorial Committee</strong></p>

<p>Rachel Laycock, Sarah Howe, Rebecca Parsons, Karan Misra, Rouan Wilsenach</p>

<p><strong>Writers</strong></p>

<p>Rachel Laycock, Neal Ford, Mike Vitale, Sam Gibson, Anand Krishnaswamy</p>

<p><strong>Site Design</strong></p>

<p>Ryan Boucher, Andrew Carr, Mike Gardiner</p>

<p><strong>Photo Credit</strong></p>

<p>Krabi by Rachel Laycock</p>

<p><strong>Special Thanks</strong></p>

<p>Dan Sansom-Gower</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle]]></title>
    <link href="http://thoughtworks.github.io/p2/issue09/puzzle/"/>
    <updated>2014-03-07T00:00:00+11:00</updated>
    <id>http://thoughtworks.github.io/p2/issue09/puzzle</id>
    <content type="html"><![CDATA[<p>In the spirit of agile, we are going to have another go at the puzzle as no correct answers were given. So we have taken your feedback and attempted to reword it to make it more clear.</p>

<p>Please send your answers to <a href="&#x6d;&#97;&#105;&#108;&#116;&#x6f;&#58;&#112;&#x32;&#64;&#x74;&#x68;&#x6f;&#117;&#103;&#x68;&#116;&#x77;&#111;&#114;&#x6b;&#115;&#x2e;&#x63;&#x6f;&#109;">&#112;&#50;&#64;&#116;&#104;&#x6f;&#117;&#103;&#x68;&#x74;&#x77;&#x6f;&#x72;&#x6b;&#x73;&#x2e;&#99;&#x6f;&#x6d;</a> and the best answer will win a P2 related prize!</p>

<p>Welcome to the first puzzle for 2014. This it is brought to you by Anand Krishnaswamy.</p>

<p>A city is divided into zones (shown in red, green, orange, lilac and blue in the picture below) by the municipal corporation. Each zone has a few garbage bins within its bounds (spread out as evenly as possible). Each zone (except the grey one) has a garbage collection truck assigned to it. This truck plies the designated zone and empties the bins therein. Each truck has the capacity of 9 bins. Surrounding the brightly coloured zones is a special zone (bounded by the black line &amp; outside all the other zones) which is a &ldquo;common-zone&rdquo;. Any truck can empty bins in this zone only when it has collected all the garbage in its designated zone. No truck is assigned the grey zone.</p>

<p><img src="/p2/images/puzzle/garbage.png" alt="Garbage" /></p>

<p>A garbage truck is paid 1 bitcoins per emptied bin and a bonus of 5 bitcoins for every bin after the 5th bin emptied.</p>

<p>Devise a solution for the garbage collection company to track, manage &amp; setup accounting for their trucks &amp; ensure that the city is garbage-free. Note that your elegant solution must scale to a city with, say, 10,000 bins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Isolation and Automation via Vagrant]]></title>
    <link href="http://thoughtworks.github.io/p2/issue09/isolation-via-vagrant"/>
    <updated>2014-03-03T00:00:00+11:00</updated>
    <id>http://thoughtworks.github.io/p2/issue09/isolation-and-automation-via-vagrant</id>
    <content type="html"><![CDATA[<p>Anyone who has gone from developing on Unix to Windows can tell you the pain of crossing technical stacks. In spite of this, disparate tech stacks are common in many organisations. Even on the same team, developers, testers and operations can have different machine setups and tool choices. Sometimes it’s just down to personal choice. But it’s not necessarily a bad thing. Having consistency can cause innovation to stagnate and sometimes one tool really is better suited to a purpose than another. But what if you need your teams to cross-pollinate or merge together?</p>

<blockquote><blockquote><p>“To have every engineer learn about the intricacies of each environment … would be completely impractical.”</p></blockquote></blockquote>

<p>To have every engineer learn about the intricacies of each environment that she may or may not be working in would be completely impractical and create an extremely slow ramp-up time. So what can you do to not spend inordinate amounts of time getting everyone in a state where they can actually do some work?</p>

<p>Let me introduce you to Vagrant….</p>

<p>My current project faces the problem of normalizing our environments across a large organization. Historically the development group was split and that lead to a large divergence in practices, development techniques, tools and approaches to solving problems. Our goal is to overcome that divergence by having a team that combines elements of both groups. That team though, has its own challenges. Each team member has brought their own special sets of tools, machine and method of working, to the table. This has resulted in several technical stacks, each with its own knowledge silo that only a handful of people, or even just one person, on the team can operate.</p>

<p>Faced with this, the team has started to adopt Vagrant as a way to normalize, isolate and automate our environments. We looked at other tools like Boxen and Chef as ways to manage our machines, but quickly decided against them because of the ‘Bring Your Own Device’ nature of the team. Not to mention that Boxen would work only on Mac devices and we were dealing with Windows and Unix like environments. Chef works cross-platform, but gave less flexibility to the developer in how she set up her environment &ndash; we do use Chef as a way to manage the VMs, though.</p>

<p>Environment Consolidation
Some environments are more modern than others. Either because they are newer or have had recent investment. Some have technical debt that needs to be overcome in order to introduce a more modern toolchain. We have found that Vagrant solves many of the conflicts and difficulties that arose in our competing development environments.</p>

<p>One conflict we face is the differences between workstations and upstream environments. We want to normalize the tools we use, so we did the following in each environment:</p>

<p>Development: We abstracted away the differences between Mac, Linux and &ndash; for the most part &ndash; Windows. Doing this was a great way to ensure consistency for engineers.
Production: To go just a step further, our Vagrant boxes are set up to use the same virtual machine image we use in the datacenter, where we deploy. In the words of Forrest Gump, &ldquo;That&rsquo;s good! One less thing.&rdquo;</p>

<p>Some of our tooling differs because of where and how we deploy. Some of our software, for example, runs and compiles under Java 7 while others are still on Java 6. Vagrant made this completely painless because of the isolation of virtual machines.</p>

<p>We were also easily able to introduce new tools into our environments. We are a large team and communicating the addition of a new tool or library or dependency &ndash; especially system packages &ndash; can be pretty cumbersome. Luckily, we just plop it into the provisioning part of our Vagrantfile &ndash; using chef-solo &ndash; and everyone is good to go after a simple <code>vagrant provision</code>.</p>

<blockquote><blockquote><p>”Been on holiday for a week? &hellip; you can be confident that when you return, a simple re-provisioning of the Vagrant box will get any tool changes you missed?”
Sunshine and lollipops
The introduction of Vagrant into our environment allows for any team member to jump confidently from one part of our code to another. They can have a fully functioning environment in at most, 15 minutes. A developer on a Windows machine can quickly jump into a new part of the codebase with her pair by bringing up the required Vagrant box and starting to poke around in the code. Been on holiday for a week? In our team, you can be confident than when you return a simple re-provisioning of the Vagrant box will get any tool changes you missed. And, if you’re using Chef or Puppet, easily see the differences in the log. Allowing a conversation like, &ldquo;Why was gcc upgraded last week?&rdquo; instead of the open ended, &ldquo;What happened last week that I need to know about?&rdquo;</p></blockquote></blockquote>

<p>Bonus features
In addition, Vagrant provides some nice bonuses to our development environment and workflow, including bringing new team members on-board quickly, finding bugs faster and to recovering from environmental quagmires&hellip;
New team member on-boarding
This is one of my favorites. How long does it usually take for a new team member to be ready to work on your team? We regularly on-board a new team members &ndash; either new to the team or that part of the codebase. It is really fun and empowering to say, &ldquo;Here are the steps: 1. Check out the code, 2. Run ./go [1], 3. Take a 10 minute coffee break and you will be ready to go when you get back&rdquo;.
Recreating deployment schemes
We are also integrating many systems together that get deployed separately to different VMs in our Continuous Integration build and in production. It is relatively easy for us to set up a &lsquo;production-like&rsquo; deployment on our local boxes. Bring up 2+ boxes, point them at each other &ndash; using the :private_network option in Vagrant &ndash; and run your tests to see the bug visible in a production-like scenario.
Easy nuclear option
When things go wrong and you&rsquo;ve yak shaved for a hours, it can be really disheartening to have to resort to the &lsquo;nuclear option&rsquo; and reinstall your operating system. With Vagrant, the nuclear option becomes easy. It&rsquo;s time for another coffee break and you&rsquo;ll be back up and running in no time.</p>

<p>⁂</p>

<p>Vagrant allows our team to easily maintain a productive working environment by normalizing many different workstation setups and isolating the particulars of our environments. Without it, our progress would grind to a halt.</p>

<p>If you think it is too difficult to get started, I challenge you to try create a Vagrant box for your next ‘from-scratch’ project. You can start with the &ldquo;shell&rdquo; provisioning and upgrade to Chef or Puppet from there. There are plenty of simple bootstraps to get you started, so stop wasting your time setting up environments and have coffee break instead.</p>

<p>[1] The &ldquo;./go&rdquo; script is a simple wrapper script that essentially does the following in any project we have: &ldquo;vagrant up; vagrant ssh &lsquo;/my/build/tool build&rsquo;&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why should I hire a polyglot programmer?]]></title>
    <link href="http://thoughtworks.github.io/p2/issue09/why-hire-a-polygot"/>
    <updated>2014-03-02T00:00:00+11:00</updated>
    <id>http://thoughtworks.github.io/p2/issue09/why-should-i-hire-a-polyglot-programmer</id>
    <content type="html"><![CDATA[<p>It’s common for people to be sceptical of software developers with varied coding experience. We&rsquo;re used to seeing, “5 years C# experience” on the CV in front of us, so when we see a CV that says: “2 years of Ruby, 1 year of Python and 2 years of Java”, we might be concerned that the person doesn&rsquo;t have the depth of experience we need.  Although this reaction is natural, it’s misguided.</p>

<blockquote><blockquote><p>”If it doesn&rsquo;t matter whether the programmer you&rsquo;re considering has deep knowledge of the language your application uses, what does?“
The person with the second CV could be a better developer on a C# project than your language expert, despite having little or no C# experience. Let’s not confuse them with a developer who happens to know a few languages. I’m talking about a particular kind of developer with varied experience and a good grasp of engineering fundamentals. The polyglot programmer.</p></blockquote></blockquote>

<p>pol·y·glot
ˈpäliˌglät/
adjective
knowing or using several languages.</p>

<p>If it doesn&rsquo;t matter whether the programmer you&rsquo;re considering has deep knowledge of the language your application uses, what does? How are you meant to decide whether a coder is up to the task? How do you know they&rsquo;ll be able to pick up C# and add value to your project without slowing you down?
Let me set the scene&hellip;
Your organisation&rsquo;s technology stack is .NET. Your team is a group of seasoned .NET developers and their experience ranges from 5-15 years. Let&rsquo;s say you hire the person with the second CV.
Ana, has a number of years of experience under her belt, but none in .NET. In spite of the scepticism of the team, Ana quickly picks up C#. She is not only able to keep up with the team, but ends up teaching them many new things.
Why?
It’s all about the basics
Software engineering is about more than the language you&rsquo;re using. In my experience, the developer you want on your team is often the one that understands these fundamental software engineering practices:
Automated testing
Automated tests give us confidence that our software does what it&rsquo;s meant to. The developer you hire should understand this and ensure that testing is a first class concern in your development process. Developers who are passionate about testing tend to be intolerant of those who are not. With your support, expect your new hire to quickly get the rest of the team writing tests.
Design
When I talk about design, I&rsquo;m not thinking of UML diagrams or planning out the details of the application in advance, which could potentially make it difficult to change. I’m talking about having an awareness of what good code looks like and ensuring that the team is constantly making the small changes required to ensure the code stays that way. The programmer you want to hire understands emergent design and object oriented programming. They know how to refactor code to make it easier to work with, regardless of the language they are using.
Deployment
Your software is worthless unless it is in production. No matter how innovative the features are, if a user cannot use it, it’s pointless. When you hire a developer who knows how to automate the deployment and configuration of your applications, you gain the potential to move quickly on new ideas and confidence that your application can recover from disasters.
These skills cross-cut languages and a developer who really understands how to apply these practices in one language can port their knowledge to another.
Varied experience
Ana notices that the assertions the team are writing in their tests are clumsy. The tests don&rsquo;t read well and the error messages don&rsquo;t provide much detail when they fail. In her Java days, she used a library called Hamcrest that made assertions read more like English and provide clearer error messages on failure. She asks herself “Is there something like that for .NET?” With a quick search, she finds FluentAssertions. To her delight, it has cleaner syntax than the Java library she’s used before, thanks to C#&rsquo;s extension methods.
Ana realises the team deploys their application manually. She has automated a number of deployments in Unix and, even though there are more sophisticated tools available, believes a bash script is an improvement over manually deploying. She does some digging and comes across PowerShell. She starts writing some PowerShell scripts to automate the deployment. The syntax is a bit clumsier than Bash, but a lot of it is the same. Soon she has a script up and running that copies the application DLLs and gets the web server to serve the updated files. She asks herself whether there&rsquo;s a way to test all this PowerShell she’s writing. Ana finds a testing framework called Pester and tests the scripts she’s written.
The team is taken aback. They&rsquo;ve never even tried automating their deployment, and some Windows newbie has just written scripts to do it in a Microsoft language. And it’s tested! Who knew you could test scripts?
A polyglot programmer can open your team&rsquo;s eyes to the development practices and tools that are common in other languages.
The right tool for the job
Not all applications are the same. The problems they seek to solve vary greatly. Knowing multiple languages allows you to pick the right technology for the problem at hand. Why should you care? Software built on the wrong technology stack can be unnecessarily complex and painful. For example, using Java to solve a clearly functional problem, when Clojure would be simpler. Or building a Rails app when your users want the kind of fluid interface a single page JavaScript framework can give them.
Hiring a Polyglot Programmer allows you to use their breadth of experience to help you make smart decisions on your technology choices.
I&rsquo;m sold! Where do I find one?
This is the hard part. Poor development practices are widespread in the industry. If you find a developer who matches the criteria I&rsquo;ve described, snap them up! Remember to look for more than their experience in your language or framework on their CV. What do they know about quality software design and testing? What is their experience in putting their code live?</p>

<blockquote><blockquote><p>”If you can&rsquo;t find a good polyglot programmer, then you have the power to create one!“
I&rsquo;m not saying that deep knowledge of a language or framework isn’t useful. It&rsquo;s often important, so don&rsquo;t run off and fire your team of language experts. The point I&rsquo;m making is that a polyglot programmer brings a set of valuable general skills and can learn the specifics as they go.
⁂
The good news is that, if you can&rsquo;t find a good polyglot programmer, you have the power to create one! Encourage your development team to broaden their skill set, give them the time to experiment with new languages, frameworks and tools. And, most importantly, make sure you&rsquo;re helping them build those crucial fundamental skills. Those skills that differentiate a great developer from a decent one, no matter which language they&rsquo;re coding in.</p></blockquote></blockquote>
]]></content>
  </entry>
  
</feed>
